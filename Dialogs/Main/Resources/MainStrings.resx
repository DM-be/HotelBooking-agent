<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CALL_BUTTON_TEXT" xml:space="preserve">
    <value>Call</value>
  </data>
  <data name="CALL_CARD_TITLE" xml:space="preserve">
    <value>Our number 📱</value>
  </data>
  <data name="CALL_REPLY_TEXT" xml:space="preserve">
    <value>You wouldn't be talking to me, but give us a call and my colleagues would be glad to help 🤙</value>
  </data>
  <data name="CANCELLED" xml:space="preserve">
    <value>Ok, let's start over.</value>
  </data>
  <data name="COMPLETED" xml:space="preserve">
    <value>What else can I help you with?</value>
  </data>
  <data name="CONFUSED" xml:space="preserve">
    <value>I'm sorry, I'm not able to help with that.</value>
  </data>
  <data name="CONTEXT_TEXT_BOOK_A_ROOM" xml:space="preserve">
    <value>I want to book a room.</value>
  </data>
  <data name="CONTEXT_TEXT_CALL" xml:space="preserve">
    <value>Could I call you?</value>
  </data>
  <data name="CONTEXT_TEXT_CALL_US" xml:space="preserve">
    <value>Could I call you?</value>
  </data>
  <data name="CONTEXT_TEXT_DIRECTIONS" xml:space="preserve">
    <value>I need directions to your hotel.</value>
  </data>
  <data name="ERROR" xml:space="preserve">
    <value>Sorry, it looks like something went wrong.</value>
  </data>
  <data name="GREETING_MORE" xml:space="preserve">
    <value>If you need anything else, just ask!</value>
  </data>
  <data name="GREETING_PROMPT_FOR_ACTION" xml:space="preserve">
    <value>Let's get started 👊</value>
  </data>
  <data name="GREETING_WITH_NAME" xml:space="preserve">
    <value>Hi {0}, I'm the new virtual front desk clerk for Starhotel 🏨 ! Management hired me to help you book a room or answer any questions you might have 😉</value>
  </data>
  <data name="HELP" xml:space="preserve">
    <value>I can help you book a room or answer questions.</value>
  </data>
  <data name="HOTEL_NUMBER" xml:space="preserve">
    <value>tel: +15 105 551 234</value>
  </data>
  <data name="QUICK_REPLY_BUTTON_BOOKING_OVERVIEW" xml:space="preserve">
    <value>Booking overview</value>
  </data>
  <data name="QUICK_REPLY_BUTTON_CALL" xml:space="preserve">
    <value>Call</value>
  </data>
  <data name="QUICK_REPLY_BUTTON_CONFIRM_BOOKING" xml:space="preserve">
    <value>Confirm booking</value>
  </data>
  <data name="QUICK_REPLY_BUTTON_DIRECTION" xml:space="preserve">
    <value>Directions</value>
  </data>
  <data name="QUICK_REPLY_BUTTON_FIND_A_ROOM" xml:space="preserve">
    <value>Find a room</value>
  </data>
  <data name="QUICK_REPLY_BUTTON_WHAT_CAN_YOU_DO" xml:space="preserve">
    <value>What can you do?</value>
  </data>
  <data name="RANDOM_CONTINUE_1" xml:space="preserve">
    <value>What else can I help you with?</value>
  </data>
  <data name="RANDOM_CONTINUE_2" xml:space="preserve">
    <value>How can I help? 👊</value>
  </data>
  <data name="RANDOM_CONTINUE_3" xml:space="preserve">
    <value>Glad to help. Anything else? 😃</value>
  </data>
  <data name="RANDOM_CONTINUE_4" xml:space="preserve">
    <value>Anything else? </value>
  </data>
  <data name="RANDOM_CONTINUE_5" xml:space="preserve">
    <value>What would you like to do next?</value>
  </data>
  <data name="RANDOM_CONTINUE_6" xml:space="preserve">
    <value>Do you need anything else?</value>
  </data>
  <data name="RANDOM_CONTINUE_7" xml:space="preserve">
    <value>Do you have any more questions about our hotel or services?</value>
  </data>
  <data name="RANDOM_CONTINUE_8" xml:space="preserve">
    <value>Need anything else? 😄</value>
  </data>
  <data name="RANDOM_CONTINUE_9" xml:space="preserve">
    <value>Happy to help 😁 Anything else?</value>
  </data>
  <data name="WHAT_CAN_YOU_DO_NLU" xml:space="preserve">
    <value>I can understand things like "find me a room on april 15" or "show me my booked rooms". Go ahead try it out 😉</value>
  </data>
  <data name="WHAT_CAN_YOU_DO_SMART" xml:space="preserve">
    <value>I try to keep things short by providing you with buttons but I'm pretty smart 🤓</value>
  </data>
  <data name="WHAT_CAN_YOU_DO_TASKS" xml:space="preserve">
    <value>My purpose is to assist you in booking a room with us. I can also answer any general questions you might have about our hotel. </value>
  </data>
</root>