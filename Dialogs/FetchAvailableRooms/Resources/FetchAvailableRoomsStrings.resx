<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CACHED_STATE_OVERVIEW" xml:space="preserve">
    <value>Last time you were looking for a room for {0} people between {1} and {2}. Is this still what you are looking for?</value>
  </data>
  <data name="FOUND_ROOMS" xml:space="preserve">
    <value>OK, I found {0} rooms for you. </value>
  </data>
  <data name="HOLD_ON_CHECKING" xml:space="preserve">
    <value>Hold on, I'm checking... </value>
  </data>
  <data name="INCORRECT_DATE" xml:space="preserve">
    <value>Sorry you cannot book a room in the past. </value>
  </data>
  <data name="INTRODUCTION_MISTAKES" xml:space="preserve">
    <value>I can look up rooms but I need more info. If you make a mistake during our talk, just act natural and ask me to change it. I'll understand 🧐</value>
    <comment>I can look up rooms but I need more info. If you supply me with wrong info, just act natural and ask me to update it for you. I'll understand 🧐</comment>
  </data>
  <data name="INTRODUCTION_MORE_INFO" xml:space="preserve">
    <value>I can lookup rooms but I need a bit more info. </value>
  </data>
  <data name="INTRODUCTION_START" xml:space="preserve">
    <value>OK, let's find you a room! 👊</value>
  </data>
  <data name="LEAVINGDATE_PROMPT" xml:space="preserve">
    <value>When would you be leaving?</value>
  </data>
  <data name="NOT_RECOGNIZED_DATE" xml:space="preserve">
    <value>I'm sorry, I do not understand. Please enter the date or time for your booking.</value>
  </data>
  <data name="SMOKING_ALLOWED" xml:space="preserve">
    <value>🚬</value>
  </data>
  <data name="SMOKING_NOT_ALLOWED" xml:space="preserve">
    <value>🚭</value>
  </data>
  <data name="START_OVER" xml:space="preserve">
    <value>Ok, let's start over.</value>
  </data>
  <data name="STATE_OVERVIEW" xml:space="preserve">
    <value>You want a room for {0} people between {1} and {2} right? </value>
    <comment>You are looking for a room for {0} people between {1} and {2}. Is this correct?</comment>
  </data>
  <data name="UNDERSTAND_EXAMPLE" xml:space="preserve">
    <value>For example: if I ask you when you would leave, you can still change your checkin time by saying "I want to change my checkin time".</value>
    <comment>For example: if I ask you when you would leave, you can still change your checkin time by saying "I want to change my checkin time".</comment>
  </data>
  <data name="UNDERSTAND_NLU" xml:space="preserve">
    <value>I can understand most sentences related to finding a room, such as "I want to checkout next week sunday" and so on.</value>
  </data>
  <data name="UPDATE_ARRIVALDATE_WITHOUT_ENTITY" xml:space="preserve">
    <value>Do you want to change your checkin date?</value>
  </data>
  <data name="UPDATE_ARRIVALDATE_WITH_ENTITY" xml:space="preserve">
    <value>Do you want to change your checkin date to {0}?</value>
  </data>
  <data name="UPDATE_LEAVINGDATE_WITHOUT_ENTITY" xml:space="preserve">
    <value>Do you want to change your checkout date?</value>
  </data>
  <data name="UPDATE_LEAVINGDATE_WITH_ENTITY" xml:space="preserve">
    <value>Do you want to change your checkout date to {0}?</value>
  </data>
  <data name="UPDATE_NUMBEROFPEOPLE_WITHOUT_ENTITY" xml:space="preserve">
    <value>Do want to change the number of people?</value>
  </data>
  <data name="UPDATE_NUMBEROFPEOPLE_WITH_ENTITY" xml:space="preserve">
    <value>Do you want to change the number of people to {0}?</value>
  </data>
  <data name="UPDATE_PROMPT" xml:space="preserve">
    <value>What would you like to change?</value>
  </data>
  <data name="WHEELCHAIR_ACCESSIBLE" xml:space="preserve">
    <value>♿</value>
  </data>
  <data name="WHEELCHAIR_INACCESIBLE" xml:space="preserve">
    <value />
  </data>
</root>